<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\GrpcTestApi\Api;

use \Magento\GrpcTestApi\Api\Data\GenerateArgInterface;
use \Magento\GrpcTestApi\Api\Data\ProductInterface;
use \Magento\GrpcTestApi\Api\Data\ReadRequestInterface;
use \Magento\GrpcTestApi\Api\Data\ReadResponseInterface;
use \Magento\GrpcTestApi\Api\Data\ClearArgInterface;
use \Magento\GrpcTestApi\Api\Data\ClearedInterface;
use \Magento\GrpcTestApi\Proto\GenerateArg;
use \Magento\GrpcTestApi\Proto\Product;
use \Magento\GrpcTestApi\Proto\ReadRequest;
use \Magento\GrpcTestApi\Proto\ReadResponse;
use \Magento\GrpcTestApi\Proto\ClearArg;
use \Magento\GrpcTestApi\Proto\Cleared;
use \Magento\GrpcTestApi\Proto\ProductsClient;

/**
 * Autogenerated description for Products class
 *
 * @SuppressWarnings(PHPMD)
 */
class Products implements ProductsInterface
{
    /**
     * @var ProductsClient
     */
    private $protoClient;

    /**
     * @param string $hostname
     * @param array $options
     * @param string|null $channel
     */
    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new ProductsClient($hostname, $options, $channel);
    }

    /**
     * @inheritdoc
     *
     * @param GenerateArgInterface $request
     * @return ProductInterface
     * @throws \Throwable
     */
    public function generate(GenerateArgInterface $request): ProductInterface
    {
        $protoRequest = $this->generateToProto($request);
        [$protoResult, $status] = $this->protoClient->generate($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->generateFromProto($protoResult);
    }

    /**
     * Autogenerated description for generate method
     *
     * @param GenerateArgInterface $value
     * @return GenerateArg
     */
    private function generateToProto(GenerateArgInterface $value): GenerateArg
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\GenerateArg
        // to \Magento\GrpcTestApi\Proto\GenerateArg
        /** @var \Magento\GrpcTestApi\Api\Data\GenerateArg $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\GenerateArg();
            $r->setNumber($value->getNumber());
            $r->setAsync($value->getAsync());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for generate method
     *
     * @param Product $value
     * @return ProductInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function generateFromProto(Product $value): ProductInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\Product
        // to \Magento\GrpcTestApi\Api\Data\Product
        /** @var \Magento\GrpcTestApi\Proto\Product $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\Product();
            $r->setId($value->getId());
            $r->setSku($value->getSku());
            $r->setPrice($value->getPrice());
            $r->setTitle($value->getTitle());
            $r->setDescription($value->getDescription());
            $r->setImgUrl($value->getImgUrl());
            $r->setAvailable($value->getAvailable());
            $res = [];
            foreach ($value->getOptions() as $item8) {
                // convert data from \Magento\GrpcTestApi\Proto\Option
                // to \Magento\GrpcTestApi\Api\Data\Option
                /** @var \Magento\GrpcTestApi\Proto\Option $item8 **/
                $p = function () use ($item8) {
                    $r = new \Magento\GrpcTestApi\Api\Data\Option();
                    $r->setId($item8->getId());
                    $r->setTitle($item8->getTitle());
                    $r->setPrice($item8->getPrice());
                    $r->setAvailable($item8->getAvailable());
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setOptions($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ReadRequestInterface $request
     * @return ReadResponseInterface
     * @throws \Throwable
     */
    public function read(ReadRequestInterface $request): ReadResponseInterface
    {
        $protoRequest = $this->readToProto($request);
        [$protoResult, $status] = $this->protoClient->read($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->readFromProto($protoResult);
    }

    /**
     * Autogenerated description for read method
     *
     * @param ReadRequestInterface $value
     * @return ReadRequest
     */
    private function readToProto(ReadRequestInterface $value): ReadRequest
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\ReadRequest
        // to \Magento\GrpcTestApi\Proto\ReadRequest
        /** @var \Magento\GrpcTestApi\Api\Data\ReadRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\ReadRequest();
            $r->setN($value->getN());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for read method
     *
     * @param ReadResponse $value
     * @return ReadResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function readFromProto(ReadResponse $value): ReadResponseInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\ReadResponse
        // to \Magento\GrpcTestApi\Api\Data\ReadResponse
        /** @var \Magento\GrpcTestApi\Proto\ReadResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\ReadResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\GrpcTestApi\Proto\Product
                // to \Magento\GrpcTestApi\Api\Data\Product
                /** @var \Magento\GrpcTestApi\Proto\Product $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\GrpcTestApi\Api\Data\Product();
                    $r->setId($item1->getId());
                    $r->setSku($item1->getSku());
                    $r->setPrice($item1->getPrice());
                    $r->setTitle($item1->getTitle());
                    $r->setDescription($item1->getDescription());
                    $r->setImgUrl($item1->getImgUrl());
                    $r->setAvailable($item1->getAvailable());
                    $res = [];
                    foreach ($item1->getOptions() as $item9) {
                        // convert data from \Magento\GrpcTestApi\Proto\Option
                        // to \Magento\GrpcTestApi\Api\Data\Option
                        /** @var \Magento\GrpcTestApi\Proto\Option $item9 **/
                        $p = function () use ($item9) {
                            $r = new \Magento\GrpcTestApi\Api\Data\Option();
                            $r->setId($item9->getId());
                            $r->setTitle($item9->getTitle());
                            $r->setPrice($item9->getPrice());
                            $r->setAvailable($item9->getAvailable());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setOptions($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param ClearArgInterface $request
     * @return ClearedInterface
     * @throws \Throwable
     */
    public function clear(ClearArgInterface $request): ClearedInterface
    {
        $protoRequest = $this->clearToProto($request);
        [$protoResult, $status] = $this->protoClient->clear($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->clearFromProto($protoResult);
    }

    /**
     * Autogenerated description for clear method
     *
     * @param ClearArgInterface $value
     * @return ClearArg
     */
    private function clearToProto(ClearArgInterface $value): ClearArg
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\ClearArg
        // to \Magento\GrpcTestApi\Proto\ClearArg
        /** @var \Magento\GrpcTestApi\Api\Data\ClearArg $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\ClearArg();
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for clear method
     *
     * @param Cleared $value
     * @return ClearedInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function clearFromProto(Cleared $value): ClearedInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\Cleared
        // to \Magento\GrpcTestApi\Api\Data\Cleared
        /** @var \Magento\GrpcTestApi\Proto\Cleared $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\Cleared();
            return $r;
        };
        $out = $p();

        return $out;
    }
}

<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\GrpcTestApi\Api;

use \Magento\GrpcTestApi\Api\Data\GenerateArgInterface;
use \Magento\GrpcTestApi\Api\Data\ProductInterface;
use \Magento\GrpcTestApi\Api\Data\ReadRequestInterface;
use \Magento\GrpcTestApi\Api\Data\ReadResponseInterface;
use \Magento\GrpcTestApi\Api\Data\ClearArgInterface;
use \Magento\GrpcTestApi\Api\Data\ClearedInterface;
use \Magento\GrpcTestApi\Proto\GenerateArg;
use \Magento\GrpcTestApi\Proto\Product;
use \Magento\GrpcTestApi\Proto\ReadRequest;
use \Magento\GrpcTestApi\Proto\ReadResponse;
use \Magento\GrpcTestApi\Proto\ClearArg;
use \Magento\GrpcTestApi\Proto\Cleared;
use \Magento\GrpcTestApi\Proto\ProductsClient;

/**
 * Autogenerated description for ProductsProxyServer class
 *
 * @SuppressWarnings(PHPMD)
 */
class ProductsProxyServer implements \Magento\GrpcTestApi\Proto\ProductsInterface
{
    /**
     * @var ProductsServerInterface
     */
    private $service;

    /**
     * @param ProductsServerInterface $service
     */
    public function __construct(
        ProductsServerInterface $service
    ) {
        $this->service = $service;
    }

    /**
     * Autogenerated description for generate method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param GenerateArg $in
     * @return Product
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function generate(\Spiral\GRPC\ContextInterface $ctx, GenerateArg $in): Product
    {
        try {
            $magentoDtoRequest = $this->generateFromProto($in);
            $magentoDtoResponse = $this->service->generate($magentoDtoRequest);
            return $this->generateToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for generate method
     *
     * @param GenerateArg $value
     * @return GenerateArgInterface
     */
    private function generateFromProto(GenerateArg $value): GenerateArgInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\GenerateArg
        // to \Magento\GrpcTestApi\Api\Data\GenerateArg
        /** @var \Magento\GrpcTestApi\Proto\GenerateArg $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\GenerateArg();
            $r->setNumber($value->getNumber());
            $r->setAsync($value->getAsync());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for generate method
     *
     * @param ProductInterface $value
     * @return Product
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function generateToProto(ProductInterface $value): Product
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\Product
        // to \Magento\GrpcTestApi\Proto\Product
        /** @var \Magento\GrpcTestApi\Api\Data\Product $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\Product();
            $r->setId($value->getId());
            $r->setSku($value->getSku());
            $r->setPrice($value->getPrice());
            $r->setTitle($value->getTitle());
            $r->setDescription($value->getDescription());
            $r->setImgUrl($value->getImgUrl());
            $r->setAvailable($value->getAvailable());
            $res = [];
            foreach ($value->getOptions() as $item8) {
                // convert data from \Magento\GrpcTestApi\Api\Data\Option
                // to \Magento\GrpcTestApi\Proto\Option
                /** @var \Magento\GrpcTestApi\Api\Data\Option $item8 **/
                $p = function () use ($item8) {
                    $r = new \Magento\GrpcTestApi\Proto\Option();
                    $r->setId($item8->getId());
                    $r->setTitle($item8->getTitle());
                    $r->setPrice($item8->getPrice());
                    $r->setAvailable($item8->getAvailable());
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setOptions($res);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for read method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ReadRequest $in
     * @return ReadResponse
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function read(\Spiral\GRPC\ContextInterface $ctx, ReadRequest $in): ReadResponse
    {
        try {
            $magentoDtoRequest = $this->readFromProto($in);
            $magentoDtoResponse = $this->service->read($magentoDtoRequest);
            return $this->readToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for read method
     *
     * @param ReadRequest $value
     * @return ReadRequestInterface
     */
    private function readFromProto(ReadRequest $value): ReadRequestInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\ReadRequest
        // to \Magento\GrpcTestApi\Api\Data\ReadRequest
        /** @var \Magento\GrpcTestApi\Proto\ReadRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\ReadRequest();
            $r->setN($value->getN());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for read method
     *
     * @param ReadResponseInterface $value
     * @return ReadResponse
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function readToProto(ReadResponseInterface $value): ReadResponse
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\ReadResponse
        // to \Magento\GrpcTestApi\Proto\ReadResponse
        /** @var \Magento\GrpcTestApi\Api\Data\ReadResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\ReadResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\GrpcTestApi\Api\Data\Product
                // to \Magento\GrpcTestApi\Proto\Product
                /** @var \Magento\GrpcTestApi\Api\Data\Product $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\GrpcTestApi\Proto\Product();
                    $r->setId($item1->getId());
                    $r->setSku($item1->getSku());
                    $r->setPrice($item1->getPrice());
                    $r->setTitle($item1->getTitle());
                    $r->setDescription($item1->getDescription());
                    $r->setImgUrl($item1->getImgUrl());
                    $r->setAvailable($item1->getAvailable());
                    $res = [];
                    foreach ($item1->getOptions() as $item9) {
                        // convert data from \Magento\GrpcTestApi\Api\Data\Option
                        // to \Magento\GrpcTestApi\Proto\Option
                        /** @var \Magento\GrpcTestApi\Api\Data\Option $item9 **/
                        $p = function () use ($item9) {
                            $r = new \Magento\GrpcTestApi\Proto\Option();
                            $r->setId($item9->getId());
                            $r->setTitle($item9->getTitle());
                            $r->setPrice($item9->getPrice());
                            $r->setAvailable($item9->getAvailable());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setOptions($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setItems($res);
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for clear method
     *
     * @param \Spiral\GRPC\ContextInterface $ctx
     * @param ClearArg $in
     * @return Cleared
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function clear(\Spiral\GRPC\ContextInterface $ctx, ClearArg $in): Cleared
    {
        try {
            $magentoDtoRequest = $this->clearFromProto($in);
            $magentoDtoResponse = $this->service->clear($magentoDtoRequest);
            return $this->clearToProto($magentoDtoResponse);
        } catch (\Exception $e) {
            throw new \Spiral\GRPC\Exception\InvokeException(
                $e->getMessage(),
                \Spiral\GRPC\StatusCode::UNKNOWN,
                [],
                $e
            );
        }
    }

    /**
     * Autogenerated description for clear method
     *
     * @param ClearArg $value
     * @return ClearArgInterface
     */
    private function clearFromProto(ClearArg $value): ClearArgInterface
    {
        // convert data from \Magento\GrpcTestApi\Proto\ClearArg
        // to \Magento\GrpcTestApi\Api\Data\ClearArg
        /** @var \Magento\GrpcTestApi\Proto\ClearArg $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Api\Data\ClearArg();
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * Autogenerated description for clear method
     *
     * @param ClearedInterface $value
     * @return Cleared
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function clearToProto(ClearedInterface $value): Cleared
    {
        // convert data from \Magento\GrpcTestApi\Api\Data\Cleared
        // to \Magento\GrpcTestApi\Proto\Cleared
        /** @var \Magento\GrpcTestApi\Api\Data\Cleared $value **/
        $p = function () use ($value) {
            $r = new \Magento\GrpcTestApi\Proto\Cleared();
            return $r;
        };
        $proto = $p();

        return $proto;
    }
}
